metrics = "ga:visits",
filters = "ga:medium==referral; ga:source=t.co",
dimensions = "ga:date",
max = 1500,
sort = "ga:date")
tmp <- ga$getData("66228613",
start.date = "2011-01-01",
end.date = "2013-02-14",
metrics = "ga:visits",
filters = "ga:medium==referral; ga:source==t.co",
dimensions = "ga:date",
max = 1500,
sort = "ga:date")
visits_notprovided.df <- ga$getData("41367337",
start.date = "2011-01-01",
end.date = "2013-01-10",
metrics = "ga:visits",
filters = "ga:keyword==(not provided);ga:source==google;ga:medium==organic",
dimensions = "ga:date",
max = 1500,
sort = "ga:date")
tmp <- ga$getData("66228613",
start.date = "2011-01-01",
end.date = "2013-02-14",
metrics = "ga:visits",
filters = "ga:medium==referral;ga:source==t.co",
dimensions = "ga:date",
max = 1500,
sort = "ga:date")
tmp
dim(visitsTumblr)
dim(visitsTumblrTwitter)
dim(visitsWordpressTwitter)
gaData <- data.frame(date=visitsWordpress[,1],visitsTumblr=visitsTumblr[,2],visitsWordpress=visitsWordpress[,2],visitsTumblrTwitter=visitsTumblrTwitter[,2],visitsWordpressTwitter=visitsWordpressTwitter[,2])
class(vistsTumblr)
class(visitsTumblr)
class(gaData)
gaData[1,]
gaData[2,]
gaData[776,]
visitsTumblr <- ga$getData("50272379",
start.date = "2011-01-01",
end.date = "2013-02-14",
metrics = "ga:visits",
filters = "",
dimensions = "ga:date",
max = 1500,
sort = "ga:date")
visitsTumblrTwitter <- ga$getData("50272379",
start.date = "2011-01-01",
end.date = "2013-02-14",
metrics = "ga:visits",
filters = "ga:medium==referral;ga:source==t.co",
dimensions = "ga:date",
max = 1500,
sort = "ga:date")
visitsWordpress <- ga$getData("66228613",
start.date = "2011-01-01",
end.date = "2013-02-14",
metrics = "ga:visits",
filters = ""l,
dimensions = "ga:date",
max = 1500,
sort = "ga:date")
visitsWordpressTwitter <- ga$getData("66228613",
start.date = "2011-01-01",
end.date = "2013-02-14",
metrics = "ga:visits",
filters = "ga:medium==referral;ga:source==t.co",
dimensions = "ga:date",
max = 1500,
sort = "ga:date")
gaData <- data.frame(date=visitsWordpress[,1],visitsTumblr=visitsTumblr[,2],visitsWordpress=visitsWordpress[,2],visitsTumblrTwitter=visitsTumblrTwitter[,2],visitsWordpressTwitter=visitsWordpressTwitter[,2])
gaData[776,]
gaData[750,]
save(gaData,file="~/Dropbox/Jeff/teaching/2013/753/jhsph753/assignments/gaData.rda")
sum(gaData[,2])
sum(gaData[,3])
sum(gaData[,3] + gaData[,2])
smooth
?smooth
?filter
plot(filter(gaData$visitsWordpress,filter=rep(1/5,5)))
plot(filter(gaData$visitsWordpress,filter=rep(1/10,10)))
plot(filter(gaData$visitsTumblr,filter=rep(1/10,10)))
plot(filter(gaData$visitsWordpress,filter=rep(1/10,10)))
setwd("~/Dropbox/Jeff/teaching/2013/753/")
list.files()
setwd("jhsph753/intros/008intro/")
slidify("index.Rmd")
library(slidify)
slidify("index.Rmd")
browseURL("index.html")
slidify("index.Rmd")
browseURL("index.html")
myOutliers <- function(dataMatrix,cx=0.5){
nSamples <- dim(dataMatrix)[1]
nExamples <- dim(dataMatrix)[2]
outlierValues <- NA
for(i in 1:dim(dataMatrix)[2]){
jj <- jitter(rep(1,nSamples))
plot(jj,dataMatrix[,i],type="n",xlim=c(0.5,1.5),xaxt="n")
text(jj,dataMatrix[,i],labels=1:nSamples,cex=cx)
outliers <- readline(prompt=("Enter outlier numbers separted by spaces"))
outliers <- as.numeric(unlist(strsplit(outliers," ")))
outlierValues <- c(outlierValues,dataMatrix[outliers,i])
}
outlierValues <- outlierValues[-1]
dataValues <- as.vector(dataMatrix)
return(list(outliers = outlierValues, data = dataValues))
}
dataMatrix <- matrix(rf(100,1,10),nrow=20)
myOutliers(dataMatrix)
myOutliers <- function(dataMatrix,cx=0.5){
nSamples <- dim(dataMatrix)[1]
nExamples <- dim(dataMatrix)[2]
outlierVector <- NA
for(i in 1:dim(dataMatrix)[2]){
jj <- jitter(rep(1,nSamples))
plot(jj,dataMatrix[,i],type="n",xlim=c(0.5,1.5),xaxt="n")
text(jj,dataMatrix[,i],labels=1:nSamples,cex=cx)
outliers <- readline(prompt=("Enter outlier numbers separted by spaces"))
outliers <- as.numeric(unlist(strsplit(outliers," ")))
tmpInd <- rep(0,dim(dataMatrix)[1])
tmpInd[outliers] <- 1
outlierVector <- c(outlierVector,tmpInd)
}
outlierVector <- outlierVector[-1]
dataValues <- as.vector(dataMatrix)
dataLess <- dataValues[dataValues <= median(dataValues)]
dataMore <- dataValues[dataValues > median(dataValues)]
return(list(outliers = outlierVector, data = dataValues))
}
myOutliers
myOutliers(dataMatrix)
output <- myOutliers(dataMatrix)
output$data[output$outliers]
output$data[which(output$outliers)]
output$data[which(output$outliers > 0)]
myOutliers <- function(dataMatrix,cx=0.5){
nSamples <- dim(dataMatrix)[1]
nExamples <- dim(dataMatrix)[2]
outlierVector <- NA
for(i in 1:dim(dataMatrix)[2]){
jj <- jitter(rep(1,nSamples))
plot(jj,dataMatrix[,i],type="n",xlim=c(0.5,1.5),xaxt="n")
text(jj,dataMatrix[,i],labels=1:nSamples,cex=cx)
outliers <- readline(prompt=("Enter outlier numbers separted by spaces"))
outliers <- as.numeric(unlist(strsplit(outliers," ")))
tmpInd <- rep(FALSE,dim(dataMatrix)[1])
tmpInd[outliers] <- TRUE
outlierVector <- c(outlierVector,tmpInd)
}
outlierVector <- outlierVector[-1]
dataValues <- as.vector(dataMatrix)
dataLess <- dataValues[dataValues <= median(dataValues)]
dataMore <- dataValues[dataValues > median(dataValues)]
return(list(outliers = outlierVector, data = dataValues))
}
output <- myOutliers(dataMatrix)
output
output <- myOutliers(dataMatrix)
output$data[output$outliers]
dataValues <- output$data
outlierVector <- output$outliers
dataLess <- dataValues[dataValues <= median(dataValues)]
outlierLess <- outlierVector[dataValues <= median(dataValues)]
dataMore <- dataValues[dataValues > median(dataValues)]
outlierMore <- outlierVector[dataValues > median(dataValues)]
lessOrd <- outlierLess[order(dataLess)]
moreOrd <- outlierMore[order(dataMore)]
lessOrd
moreOrd
cumsum(moreOrd)
rev(moreOrd)
cumsum(rev(moreOrd))
cumsum(rev(moreOrd))/cumsum(1:length(moreOrd))
plot(cumsum(rev(moreOrd))/cumsum(1:length(moreOrd)))
filter(moreOrd)
filter(moreOrd,filter=rep(1/5,5))
myfilter2 <- function(x,filter,...){
###unlike myfilter, myfilter2 returns NAs in the edges.
L=dim(x)[1]
if(L>length(filter)) res=filter(x,filter,...) else{res = t(colMeans(x) %*% t(rep(1,dim(x)[1])))}
return(res)
}
myfilter2(moreOrd,rep(1/5,5))
myfilter2(moreOrd,filter=rep(1/5,5))
moreOrd
myfilter <- function(x,filter,...){
L=length(x)
if(L>length(filter)){
res=filter(x,filter,...)
##now fill out the NAs
M=length(filter)
N=(M- 1)/2
for(i in 1:N){
w=filter[(N-i+2):M]
y=x[1:(M-N+i-1)]
res[i] = sum(w*y)/sum(w)
w=rev(w)
ii=(L-(i-1))
y=x[(ii-N):L]
res[ii]<-sum(w*y)/sum(w)
}
} else{ res=rep(mean(x),L)}
return(res)
}
myfilter(moreOrd,filter=rep(1/5,5))
myfilter(moreOrd,filter=c(rep(0,10),rep(1/10,10)))
plot(cumsum(rev(moreOrd))/cumsum(1:length(moreOrd)))
rev(moreOrd))/cumsum(1:length(moreOrd))
rev(moreOrd))/cumsum(1:length(moreOrd)
rev(moreOrd)/cumsum(1:length(moreOrd)
)
cumsum(rev(moreOrd))/cumsum(1:length(moreOrd)
)
dataLess <- dataValues[dataValues <= median(dataValues)]
outlierLess <- outlierVector[dataValues <= median(dataValues)]
outLierLess[order(dataLess)]
myfilter <- function(x,filter,...){
L=length(x)
if(L>length(filter)){
res=filter(x,filter,...)
##now fill out the NAs
M=length(filter)
N=(M- 1)/2
for(i in 1:N){
w=filter[(N-i+2):M]
y=x[1:(M-N+i-1)]
res[i] = sum(w*y)/sum(w)
w=rev(w)
ii=(L-(i-1))
y=x[(ii-N):L]
res[ii]<-sum(w*y)/sum(w)
}
} else{ res=rep(mean(x),L)}
return(res)
}
cumsum(rev(moreOrd))/cumsum(1:length(moreOrd)
)
cumsum(rev(moreOrd))/cumsum(1:length(moreOrd))
ls()
dens <- density(lessOrd)
lessOrd
dens <- density(moreOrd*1)
plot(dens)
moreOrd
?smooth.spline
outLessOrd <- outlierLess[order(dataLess)]
outMoreOrd <- outlierMore[order(dataMore)]
dataMoreOrd <- dataMore[order(dataMore)]
dataLessOrd <- dataLess[order(dataLess)]
rev(cumsum(outMoreOrd))
rev(cumsum(outMoreOrd))/1:length(outMoreOrd)
rev(cumsum(outMoreOrd)/1:length(outMoreOrd))
cumsum(outMoreOrd)
cumsum(rev(outMoreOrd))
cumsum(rev(outMoreOrd))/1:length(outMoreOrd)
probMoreOut <- rev(cumsum(rev(outMoreOrd))/1:length(outMoreOrd))
plot(probMoreOut)
plot(dataMore,probMoreOut)
plot(dataMoreOrd,probMoreOut)
probMoreOut <- myfilter(rev(cumsum(rev(outMoreOrd))/1:length(outMoreOrd)),rep(1/5,5))
plot(probMoreOut)
ssMore <- smooth.spline(probMoreOut ~ dataMoreOrd)
plot(ssMore)
?predict.smooth.spline
predict(ssMore,2)
predict(ssMore,seq(0,10,length=100))
aa <- predict(ssMore,seq(0,10,length=100))
plot(aa$y)
myOutliers <- function(dataMatrix,cx=0.5,fw=5){
nSamples <- dim(dataMatrix)[1]
nExamples <- dim(dataMatrix)[2]
outlierVector <- NA
for(i in 1:dim(dataMatrix)[2]){
jj <- jitter(rep(1,nSamples))
plot(jj,dataMatrix[,i],type="n",xlim=c(0.5,1.5),xaxt="n")
text(jj,dataMatrix[,i],labels=1:nSamples,cex=cx)
outliers <- readline(prompt=("Enter outlier numbers separted by spaces"))
outliers <- as.numeric(unlist(strsplit(outliers," ")))
tmpInd <- rep(FALSE,dim(dataMatrix)[1])
tmpInd[outliers] <- TRUE
outlierVector <- c(outlierVector,tmpInd)
}
outlierVector <- outlierVector[-1]
dataValues <- as.vector(dataMatrix)
dataLess <- dataValues[dataValues <= median(dataValues)]
outlierLess <- outlierVector[dataValues <= median(dataValues)]
dataMore <- dataValues[dataValues > median(dataValues)]
outlierMore <- outlierVector[dataValues > median(dataValues)]
outLessOrd <- outlierLess[order(dataLess)]
outMoreOrd <- outlierMore[order(dataMore)]
dataMoreOrd <- dataMore[order(dataMore)]
dataLessOrd <- dataLess[order(dataLess)]
probMoreOut <- myfilter(rev(cumsum(rev(outMoreOrd))/(1:length(outMoreOrd))),rep(1/fw,fw))
probLessOut <- myfilter(cumsum(outLessOrd)/(1:length(outLessOrd)),rep(1/fw,fw))
ssMore <- smooth.spline(probMoreOut ~ dataMoreOrd)
ssLess <- smooth.spline(probLessOut ~ dataLessOrd)
outlierFunction <- function(x){
probOut <- rep(NA,length(x))
probOut[x > median(dataValues)] <- predict(ssMore,x[x > median(dataValues)])$y
probOut[x <= median(dataValues)] <- predict(ssMore,x[x <= median(dataValues)])$y
return(probOut)
}
return(list(outliers = outlierVector, data = dataValues))
}
myOutliers(dataMatrix)
###
### Code to create a personal outlier distribution
###
myOutliers <- function(dataMatrix,cx=0.5,fw=5){
nSamples <- dim(dataMatrix)[1]
nExamples <- dim(dataMatrix)[2]
outlierVector <- NA
for(i in 1:dim(dataMatrix)[2]){
jj <- jitter(rep(1,nSamples))
plot(jj,dataMatrix[,i],type="n",xlim=c(0.5,1.5),xaxt="n")
text(jj,dataMatrix[,i],labels=1:nSamples,cex=cx)
outliers <- readline(prompt=("Enter outlier numbers separted by spaces"))
outliers <- as.numeric(unlist(strsplit(outliers," ")))
tmpInd <- rep(FALSE,dim(dataMatrix)[1])
tmpInd[outliers] <- TRUE
outlierVector <- c(outlierVector,tmpInd)
}
outlierVector <- outlierVector[-1]
dataValues <- as.vector(dataMatrix)
dataLess <- dataValues[dataValues <= median(dataValues)]
outlierLess <- outlierVector[dataValues <= median(dataValues)]
dataMore <- dataValues[dataValues > median(dataValues)]
outlierMore <- outlierVector[dataValues > median(dataValues)]
outLessOrd <- outlierLess[order(dataLess)]
outMoreOrd <- outlierMore[order(dataMore)]
dataMoreOrd <- dataMore[order(dataMore)]
dataLessOrd <- dataLess[order(dataLess)]
probMoreOut <- myfilter(rev(cumsum(rev(outMoreOrd))/(1:length(outMoreOrd))),rep(1/fw,fw))
probLessOut <- myfilter(cumsum(outLessOrd)/(1:length(outLessOrd)),rep(1/fw,fw))
ssMore <- smooth.spline(probMoreOut ~ dataMoreOrd)
ssLess <- smooth.spline(probLessOut ~ dataLessOrd)
outlierFunction <- function(x){
probOut <- rep(NA,length(x))
probOut[x > median(dataValues)] <- predict(ssMore,x[x > median(dataValues)])$y
probOut[x <= median(dataValues)] <- predict(ssMore,x[x <= median(dataValues)])$y
return(probOut)
}
return(list(outliers = outlierVector, data = dataValues,outlierFunction=outlierFunction))
}
myOutliers(dataMatrix)
tmp <- myOutliers(dataMatrix)
tmp
tmp$outlierFunction
tmp$outlierFunction(1)
plot(tmp$outlierFunction(seq(0,10,length=100)))
plot(tmp$outlierFunction(seq(-10,10,length=100)))
?ifelse
pmax
?pmax
pmax(seq(0,3,length=100).1)
pmax(seq(0,3,length=100),11)
pmax(seq(0,3,length=100),1)
pmin(seq(0,3,length=100),1)
###
### Code to create a personal outlier distribution
###
myOutliers <- function(dataMatrix,cx=0.5,fw=5){
nSamples <- dim(dataMatrix)[1]
nExamples <- dim(dataMatrix)[2]
outlierVector <- NA
for(i in 1:dim(dataMatrix)[2]){
jj <- jitter(rep(1,nSamples))
plot(jj,dataMatrix[,i],type="n",xlim=c(0.5,1.5),xaxt="n")
text(jj,dataMatrix[,i],labels=1:nSamples,cex=cx)
outliers <- readline(prompt=("Enter outlier numbers separted by spaces"))
outliers <- as.numeric(unlist(strsplit(outliers," ")))
tmpInd <- rep(FALSE,dim(dataMatrix)[1])
tmpInd[outliers] <- TRUE
outlierVector <- c(outlierVector,tmpInd)
}
outlierVector <- outlierVector[-1]
dataValues <- as.vector(dataMatrix)
dataLess <- dataValues[dataValues <= median(dataValues)]
outlierLess <- outlierVector[dataValues <= median(dataValues)]
dataMore <- dataValues[dataValues > median(dataValues)]
outlierMore <- outlierVector[dataValues > median(dataValues)]
outLessOrd <- outlierLess[order(dataLess)]
outMoreOrd <- outlierMore[order(dataMore)]
dataMoreOrd <- dataMore[order(dataMore)]
dataLessOrd <- dataLess[order(dataLess)]
probMoreOut <- myfilter(rev(cumsum(rev(outMoreOrd))/(1:length(outMoreOrd))),rep(1/fw,fw))
probLessOut <- myfilter(cumsum(outLessOrd)/(1:length(outLessOrd)),rep(1/fw,fw))
ssMore <- smooth.spline(probMoreOut ~ dataMoreOrd)
ssLess <- smooth.spline(probLessOut ~ dataLessOrd)
outlierFunction <- function(x){
probOut <- rep(NA,length(x))
probOut[x > median(dataValues)] <- pmax(pmin(predict(ssMore,x[x > median(dataValues)])$y,1),0)
probOut[x <= median(dataValues)] <-pmax(pmin(predict(ssLess,x[x <= median(dataValues)])$y,1),0)
return(probOut)
}
return(list(outliers = outlierVector, data = dataValues,outlierFunction=outlierFunction))
}
tmp <- myOutliers(dataMatrix)
plot(tmp$outlierFunction(seq(-10,10,length=100)))
dataMatrix2 <- matrix(rcauchy(20*10),nrow=20)
tmp <- myOutliers(dataMatrix2)
plot(tmp$outlierFunction(seq(-10,10,length=100)))
plot(seq(-10,10,length=100),tmp$outlierFunction(seq(-10,10,length=100)))
plot(seq(-10,10,length=100),tmp$outlierFunction(seq(-10,10,length=100)))
dataMatrix2 <- matrix(rcauchy(20*20),nrow=20)
tmp <- myOutliers(dataMatrix2)
plot(seq(-10,10,length=100),tmp$outlierFunction(seq(-10,10,length=100)))
xx <- rcauchy(100)
mean(tmp$outlierFunction(xx))
mean(tmp$outlierFunction(xx)*xx)
dataMatrix2 <- matrix(rf(20*20,1,10),nrow=20)
mean(xx)
dataMatrix2 <- matrix(rf(20*20,1,10),nrow=20)
tmp <- myOutliers(dataMatrix2)
xx <- rf(100,1,10)
mean(xx)
mean(tmp$outlierFunction(xx)*xx)
dataMatrix2 <- matrix(rnorm(20*20),nrow=20)
tmp <- myOutliers(dataMatrix2)
xx <- rnorm(100)
mean(tmp$outlierFunction(xx)*xx)
mean(xx)
plot(tmp$outlierFunction(seq(-5,5,length=100)))
setwd("~/Dropbox/Jeff/teaching/2013/753/jhsph753/intros/008intro/")
slidify("index.Rmd")
library(slidify)
slidify("index.Rmd")
browseURL("index.html")
source("https://github.com/jtleek/jhsph753/blob/master/assignments/myOutliers.R")
myOutliers <- function(dataMatrix,cx=0.5,fw=5){
nSamples <- dim(dataMatrix)[1]
nExamples <- dim(dataMatrix)[2]
outlierVector <- NA
for(i in 1:dim(dataMatrix)[2]){
jj <- jitter(rep(1,nSamples))
plot(jj,dataMatrix[,i],type="n",xlim=c(0.5,1.5),xaxt="n")
text(jj,dataMatrix[,i],labels=1:nSamples,cex=cx)
outliers <- readline(prompt=("Enter outlier numbers separted by spaces"))
outliers <- as.numeric(unlist(strsplit(outliers," ")))
tmpInd <- rep(FALSE,dim(dataMatrix)[1])
tmpInd[outliers] <- TRUE
outlierVector <- c(outlierVector,tmpInd)
}
outlierVector <- outlierVector[-1]
dataValues <- as.vector(dataMatrix)
dataLess <- dataValues[dataValues <= median(dataValues)]
outlierLess <- outlierVector[dataValues <= median(dataValues)]
dataMore <- dataValues[dataValues > median(dataValues)]
outlierMore <- outlierVector[dataValues > median(dataValues)]
outLessOrd <- outlierLess[order(dataLess)]
outMoreOrd <- outlierMore[order(dataMore)]
dataMoreOrd <- dataMore[order(dataMore)]
dataLessOrd <- dataLess[order(dataLess)]
probMoreOut <- myfilter(rev(cumsum(rev(outMoreOrd))/(1:length(outMoreOrd))),rep(1/fw,fw))
probLessOut <- myfilter(cumsum(outLessOrd)/(1:length(outLessOrd)),rep(1/fw,fw))
ssMore <- smooth.spline(probMoreOut ~ dataMoreOrd)
ssLess <- smooth.spline(probLessOut ~ dataLessOrd)
outlierFunction <- function(x){
probOut <- rep(NA,length(x))
probOut[x > median(dataValues)] <- pmax(pmin(predict(ssMore,x[x > median(dataValues)])$y,1),0)
probOut[x <= median(dataValues)] <-pmax(pmin(predict(ssLess,x[x <= median(dataValues)])$y,1),0)
return(probOut)
}
return(list(outliers = outlierVector, data = dataValues,outlierFunction=outlierFunction))
}
## Rafa's myfilter function
myfilter <- function(x,filter,...){
L=length(x)
if(L>length(filter)){
res=filter(x,filter,...)
##now fill out the NAs
M=length(filter)
N=(M- 1)/2
for(i in 1:N){
w=filter[(N-i+2):M]
y=x[1:(M-N+i-1)]
res[i] = sum(w*y)/sum(w)
w=rev(w)
ii=(L-(i-1))
y=x[(ii-N):L]
res[ii]<-sum(w*y)/sum(w)
}
} else{ res=rep(mean(x),L)}
return(res)
}
dataMatrix <- matrix(rcauchy(20*10),nrow=10)
tmp <- myOutliers(dataMatrix)
names(tmp)
plot(tmp$outlierFunction(seq(-10,10,length=100)))
plot(seq(-10,10,length=100), tmp$outlierFunction(seq(-10,10,length=100)))
setwd("~/Dropbox/Jeff/teaching/2013/753/jhsph753/intros/009intro/")
library(slidify)
slidify("index.Rmd")
browseURL("index.html")
slidify("index.Rmd")
browseURL("index.html")
slidify("index.Rmd")
slidify("index.Rmd")
slidify("index.Rmd")
getwd()
slidify("index.Rmd")
browseURL("index.html")
slidify("index.Rmd")
browseURL("index.html")
list.files()
slidify("index.Rmd")
list.files()
browseURL("index.html")
